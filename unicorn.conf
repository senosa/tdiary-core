worker_processes 2

app_dir = File.expand_path( File.dirname( __FILE__ ) )
working_directory app_dir

preload_app true

timeout 30

listen "/tmp/tdiary.sock", :backlog => 64
listen 8092, :tcp_nopush => true

pid "/run/tdiary.pid"

stderr_path "/var/log/tdiary/stderr.log"
stdout_path "/var/log/tdiary/stdout.log"

before_fork do |server, worker|
  old_pid = "/var/run/tdiary.pid.oldbin"
  if File.exists?( old_pid ) && server.pid != old_pid
    begin
      Process.kill( "QUIT", File.read( old_pid ).to_i )
    rescue Errno::ENOENT, Errno::ESRCH
    end
  end
end

after_fork do |server, worker|
  begin
    uid, gid = Process.euid, Process.egid
    user, group = "www-data", "www-data"
    target_uid = Etc.getpwnam( user ).uid
    target_gid = Etc.getpwnam( group ).gid
    worker.tmp.chown( target_uid, target_gid )
    if uid != target_uid || gid != target_gid
      Process.initgroups( user, target_gid )
      Process::GID.change_privilege( target_gid )
      Process::UID.change_privilege( target_uid )
    end
  rescue => e
    STDERR.puts "couldn't change user, oh well"
    raise e
  end
end

#GC.respond_to?(:copy_on_write_friendly=) and GC.copy_on_write_friendly = true
